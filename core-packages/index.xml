<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Core Packages on Atom-Haskell</title>
    <link>https://atom-haskell.github.io/core-packages/</link>
    <description>Recent content in Core Packages on Atom-Haskell</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Mon, 13 Mar 2017 00:04:29 +0300</lastBuildDate>
    
	<atom:link href="https://atom-haskell.github.io/core-packages/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Language-Haskell</title>
      <link>https://atom-haskell.github.io/core-packages/language-haskell/</link>
      <pubDate>Mon, 13 Mar 2017 00:05:13 +0300</pubDate>
      
      <guid>https://atom-haskell.github.io/core-packages/language-haskell/</guid>
      <description>Language-Haskell adds syntax highlighting and snippets to Haskell files in Atom.
Auto-indent If you don&amp;rsquo;t like current auto-indentation settings, you can define your own regular expression in config.cson (Edit -&amp;gt; Open Your Config), or disable it altogether.
Atom is using oniguruma for regular expression, and, as such, expressionhas to be a string, not a javascript regexp. You&amp;rsquo;ll also have to escape \.
 To disable auto-indent:
&amp;quot;.haskell.source&amp;quot;: editor: increaseIndentPattern: &#39;&#39;  By default, increaseIndentPattern has the following value:</description>
    </item>
    
    <item>
      <title>IDE-Haskell</title>
      <link>https://atom-haskell.github.io/core-packages/ide-haskell/</link>
      <pubDate>Mon, 13 Mar 2017 00:05:13 +0300</pubDate>
      
      <guid>https://atom-haskell.github.io/core-packages/ide-haskell/</guid>
      <description>IDE-Haskell Atom package provides basic capabilities, as well as a backend for other Atom-Haskell packages to use.
Known conflicts This package relies on grammar defined by language-haskell. Any other Haskell grammar packages (such as haskell-grammar) may conflict with it.
Configuration Package is fully configurable via Edit → Preferences → Packages → ide-haskell → Settings
You will likely need to specify full path to prettifier executable, at the very least.</description>
    </item>
    
    <item>
      <title>IDE-Haskell-Cabal</title>
      <link>https://atom-haskell.github.io/core-packages/ide-haskell-cabal/</link>
      <pubDate>Mon, 13 Mar 2017 00:05:13 +0300</pubDate>
      
      <guid>https://atom-haskell.github.io/core-packages/ide-haskell-cabal/</guid>
      <description>The ide-haskell-cabal package provides a build backend for ide-haskell package based on cabal or stack.
It supports easy switching between multiple versions of GHC by having a set of configuration settings for each version of GHC, plus a drop-down box to pick a GHC version. For each GHC version you can specify:
 The path (either adding to your system path or replacing it completely) The sandbox file (cabal CABAL_SANDBOX_CONFIG environment variable) The build directory (cabal --builddir parameter).</description>
    </item>
    
    <item>
      <title>Haskell-ghc-mod</title>
      <link>https://atom-haskell.github.io/core-packages/haskell-ghc-mod/</link>
      <pubDate>Mon, 13 Mar 2017 00:05:13 +0300</pubDate>
      
      <guid>https://atom-haskell.github.io/core-packages/haskell-ghc-mod/</guid>
      <description>Haskell ghc-mod opens pipe to ghc-mod and queries types, info, typechecks and lints current file.
When using with stack, see Using with stack
 Configuration Only configuration option you will likely need to set is ghcModPath. It needs to be set to full path to ghc-mod executable, if it is not in your PATH. For example, if you have ghc-mod in /home/user/.cabal/bin/, you need to write /home/user/.cabal/bin/ghc-mod in ghcModPath. Note that shell expansions are not suported, i.</description>
    </item>
    
    <item>
      <title>Autocomplete-Haskell</title>
      <link>https://atom-haskell.github.io/core-packages/autocomplete-haskell/</link>
      <pubDate>Mon, 13 Mar 2017 00:05:13 +0300</pubDate>
      
      <guid>https://atom-haskell.github.io/core-packages/autocomplete-haskell/</guid>
      <description>Autocomplete-haskell provides autocompletion facilities for your Haskell hacking. It relies on scope names provided by language-haskell and haskell-completion-backend service, provided by haskell-ghc-mod
You can show auto-completions for hole _. This will try to find replacements based on type. It&amp;rsquo;s no magic though, so if hole has some crazy type, it won&amp;rsquo;t find anything. You can also refine hole completions based on name by using named holes, e.g. _from
Sadly, it does not pick up types and/or other symbols defined in current file (ghc-mod seems to be incapable of this feat), so for this you have to rely on default autocomplete-plus SymbolProvider.</description>
    </item>
    
  </channel>
</rss>