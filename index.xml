<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Atom-Haskell documentation on Atom-Haskell</title>
    <link>https://atom-haskell.github.io/</link>
    <description>Recent content in Atom-Haskell documentation on Atom-Haskell</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    
	<atom:link href="https://atom-haskell.github.io/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Installing packages</title>
      <link>https://atom-haskell.github.io/installation/installing-packages/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://atom-haskell.github.io/installation/installing-packages/</guid>
      <description>Refer to Atom Flight Manual section on packages for more detailed information
 You can find a complete list of Atom-Haskell packages on atom.io package registry
 There are binary dependencies which are not touched upon in this section. Refer to next section for a guide.
 Pick-and-choose approach You can pick and choose what packages you want and do not want to install. However, bear in mind that language-haskell is absolutely mandatory, and ide-haskell is most likely required too.</description>
    </item>
    
    <item>
      <title>Language-Haskell</title>
      <link>https://atom-haskell.github.io/core-packages/language-haskell/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://atom-haskell.github.io/core-packages/language-haskell/</guid>
      <description>Language-Haskell adds syntax highlighting and snippets to Haskell files in Atom.
Auto-indent If you don&amp;rsquo;t like current auto-indentation settings, you can define your own regular expression in config.cson (Edit -&amp;gt; Open Your Config), or disable it altogether.
Atom is using oniguruma for regular expression, and, as such, expression has to be a string, not a javascript regexp. You&amp;rsquo;ll also have to escape \.
 To disable auto-indent:
&amp;quot;.haskell.source&amp;quot;: editor: increaseIndentPattern: &#39;&#39;  By default, increaseIndentPattern has the following value:</description>
    </item>
    
    <item>
      <title>Features</title>
      <link>https://atom-haskell.github.io/overview/features/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://atom-haskell.github.io/overview/features/</guid>
      <description>Syntax highlighting Grammars:
 Haskell (*.hs) Literate Haskell (*.lhs) Cabal (*.cabal)  Errors, warnings and lints After saving the current file the check and linter processes will be executed. After processes are finished, the results can be seen in output panel. You can see different kind of results by switching Errors, Warnings and Lints tab buttons. If you click on message&amp;rsquo;s file name in output panel, Atom will open this file and put cursor near problem that triggered output message.</description>
    </item>
    
    <item>
      <title>IDE-Haskell</title>
      <link>https://atom-haskell.github.io/core-packages/ide-haskell/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://atom-haskell.github.io/core-packages/ide-haskell/</guid>
      <description>IDE-Haskell Atom package provides basic capabilities, as well as a backend for other Atom-Haskell packages to use.
Known conflicts This package relies on grammar defined by language-haskell. Any other Haskell grammar packages (such as haskell-grammar) may conflict with it.
Configuration Package is fully configurable via Edit → Preferences → Packages → ide-haskell → Settings
You will likely need to specify full path to prettifier executable, at the very least.</description>
    </item>
    
    <item>
      <title>IDE-Haskell-Hoogle</title>
      <link>https://atom-haskell.github.io/extra-packages/ide-haskell-hoogle/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://atom-haskell.github.io/extra-packages/ide-haskell-hoogle/</guid>
      <description>Install package ide-haskell-hoogle. Refer to Atom Flight Manual for details on installing packages.
Package supports using either local Hoogle database, or remote one (hosted on https://haskell.org/hoogle/ and/or http://hoogle.haskell.org/)
 Local database requires hoogle executable, plus you will need to build hoogle database for hoogle itself to work. Remote database obviously requires connection to the Internet  Choosing remote or local database By default, package uses &amp;ldquo;new&amp;rdquo; remote database from http://hoogle.</description>
    </item>
    
    <item>
      <title>IDE-Haskell-REPL</title>
      <link>https://atom-haskell.github.io/extra-packages/ide-haskell-repl/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://atom-haskell.github.io/extra-packages/ide-haskell-repl/</guid>
      <description>This package provides a way to interact with ghci (or, alternatively, cabal repl or stack ghci) from Atom.
Repl is opened in the context of the current Atom editor, so there is no need to load the file (even though :l filename will work).
Type any ghci command in the bar at the bottom of the window and press shift+enter (on Win and Linux) or cmd+enter (on macOS) to execute it.</description>
    </item>
    
    <item>
      <title>Installing binary dependencies</title>
      <link>https://atom-haskell.github.io/installation/installing-binary-dependencies/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://atom-haskell.github.io/installation/installing-binary-dependencies/</guid>
      <description>Supported ghc-mod versions are 5.6. and up.
 These instructions assume you want to use stylish-haskell as a prettifier. If you would like to use hindent or brittany instead, substitute that in place of stylish-haskell below.
Bear in mind that prettifier has to be able to work as a unix filter, i.e. accept input on STDIN and return output on STDOUT.
 The Atom-Haskell packages (and this instructions) assume that you have at least a minimal Haskell toolchain installed on your system.</description>
    </item>
    
    <item>
      <title>IDE-Haskell-HLint</title>
      <link>https://atom-haskell.github.io/extra-packages/ide-haskell-hlint/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://atom-haskell.github.io/extra-packages/ide-haskell-hlint/</guid>
      <description>This package is intended to replace the functionality of running HLint originally provided by Haskell-ghc-mod, without requiring ghc-mod.
The package requires IDE-Haskell, which provides GUI and other niceties. It also requires you to have a working hlint binary on your system.
Installing HLint Installation follows the standard pattern of any Haskell library or program: run cabal update to update your local Hackage database, then cabal v2-install hlint to install HLint.</description>
    </item>
    
    <item>
      <title>IDE-Haskell-Cabal</title>
      <link>https://atom-haskell.github.io/core-packages/ide-haskell-cabal/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://atom-haskell.github.io/core-packages/ide-haskell-cabal/</guid>
      <description>The ide-haskell-cabal package provides a build backend for ide-haskell package based on cabal or stack.
It supports easy switching between multiple versions of GHC by having a set of configuration settings for each version of GHC, plus a drop-down box to pick a GHC version. For each GHC version you can specify:
 The path (either adding to your system path or replacing it completely) The sandbox file (cabal CABAL_SANDBOX_CONFIG environment variable) The build directory (cabal --builddir parameter).</description>
    </item>
    
    <item>
      <title>Requirements</title>
      <link>https://atom-haskell.github.io/overview/requirements/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://atom-haskell.github.io/overview/requirements/</guid>
      <description>The Atom-Haskell packages assume that you have at least a minimal Haskell toolchain installed on your system. See https://www.haskell.org/downloads for your options.
Core Atom-Haskell packages  language-haskell &amp;ndash; Syntax highlighting and Haskell autodetection ABSOLUTELY REQUIRED! ide-haskell &amp;ndash; GUI and minimal utilities ABSOLUTELY REQUIRED! ide-haskell-cabal &amp;ndash; Build Haskell projects with either cabal or stack. Reports errors/warnings on build. haskell-ghc-mod &amp;ndash; ghc-mod integration. Typecheck and lint sources without building, query type information and more.</description>
    </item>
    
    <item>
      <title>Haskell-ghc-mod</title>
      <link>https://atom-haskell.github.io/core-packages/haskell-ghc-mod/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://atom-haskell.github.io/core-packages/haskell-ghc-mod/</guid>
      <description>Haskell ghc-mod opens pipe to ghc-mod and queries types, info, typechecks and lints current file.
When using with stack, see Using with stack
 Configuration Only configuration option you will likely need to set is additionalPathDirectories. It needs to be set to full path to the directory containing ghc-mod executable, if it is not in your PATH.
For example, if you have ghc-mod in /home/user/.cabal/bin/, you need to write /home/user/.</description>
    </item>
    
    <item>
      <title>Autocomplete-Haskell</title>
      <link>https://atom-haskell.github.io/core-packages/autocomplete-haskell/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://atom-haskell.github.io/core-packages/autocomplete-haskell/</guid>
      <description>Autocomplete-haskell provides autocompletion facilities for your Haskell hacking. It relies on scope names provided by language-haskell and haskell-completion-backend service, provided by haskell-ghc-mod
You can show auto-completions for hole _. This will try to find replacements based on type. It&amp;rsquo;s no magic though, so if hole has some crazy type, it won&amp;rsquo;t find anything. You can also refine hole completions based on name by using named holes, e.g. _from
Sadly, it does not pick up types and/or other symbols defined in current file (ghc-mod seems to be incapable of this feat), so for this you have to rely on default autocomplete-plus SymbolProvider.</description>
    </item>
    
  </channel>
</rss>